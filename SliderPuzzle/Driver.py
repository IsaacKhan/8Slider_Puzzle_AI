from myLib import BFS, DFS, Classes, MiscFuncs

#default state if none is generated by user or random generator
startingState = [ [2,3,0],
                  [1,4,6],
                  [7,5,8] ]
stringSS = MiscFuncs.createStringState(startingState)

counter = 0
blankPosition = []
MiscFuncs.UserMenu()
userChoice = ""

while userChoice not in ( "3", "4", "-1"):
    userChoice = MiscFuncs.getUserInput()   

    if(userChoice is "1"):
        #Call functions to make starting state, string version of state, and find the blank position
        startingState = MiscFuncs.createUserGeneratedState()
        stringSS = MiscFuncs.createStringState(startingState)
        blankPosition = MiscFuncs.findEmptyPosition(startingState) 
        print("Your state was created! Select another option.")
        print("Here is your state:", stringSS)  
    if(userChoice is "2"):
        #Call functions to generate random starting state, string version of state, and find the blank position
        startingState = MiscFuncs.generateRandomState()
        stringSS = MiscFuncs.createStringState(startingState)
        blankPosition = MiscFuncs.findEmptyPosition(startingState)
        print("A state was generated! Select another option.")
        print("Here is your state:", stringSS)
    if(userChoice is "3"):
        #Increment counter, add stringState to dict as key and counter as value, create our node with required info and call BFS function
        counter += 1
        myDict = {stringSS: counter}
        myNode = Classes.Node(stringSS, startingState, None, [], 0)
        BFS.BFS(myDict, myNode, counter)
    if(userChoice is "4"):
        #Increment counter, add stringState to dict as key and counter as value, create our node with required info and call DFS function
        counter += 1
        myDict = {stringSS: counter}
        myNode = Classes.Node(stringSS, startingState, None, [], 0)
        DFS.DFS(myDict, myNode, counter)
    if(userChoice is "-1"):
        #Exit program
        exit(0)